# PrivacyIDEA Configuration
# 公式設定を参考にした環境変数ベース動的設定
# 参考: https://github.com/gpappsoft/privacyidea-docker/blob/main/conf/pi.cfg

import logging
import os
import pprint

pi_os_special_vars = {
    'SUPERUSER_REALM': os.getenv("SUPERUSER_REALM","admin,helpdesk").split(','),
    'PI_ENCFILE': '/data/certs/enckey',
    'PI_SCRIPT_HANDLER_DIRECTORY': '/privacyidea/scripts',
    'PI_AUDIT_KEY_PRIVATE': os.getenv("PI_AUDIT_KEY_PRIVATE", '/data/certs/private.pem'),
    'PI_AUDIT_KEY_PUBLIC': os.getenv("PI_AUDIT_KEY_PUBLIC", '/data/certs/public.pem'),
    'PI_AUDIT_SQL_TRUNCATE': os.getenv("PI_AUDIT_SQL_TRUNCATE", True),
    'PI_ENGINE_REGISTRY_CLASS': os.getenv("PI_REGISTRY_CLASS", "shared"),
    'PI_AUDIT_POOL_SIZE': os.getenv("PI_AUDIT_POOL_SIZE", "20"),
    'PI_AUDIT_NO_SIGN': os.getenv("PI_AUDIT_NO_SIGN", False),
    'PI_LOGCONFIG': '/privacyidea/etc/logging.cfg',
    'PI_LOGLEVEL': logging.getLevelName(os.getenv("PI_LOGLEVEL", "DEBUG").upper()),
    'PI_UUID_FILE': '/data/persistent/uuid.txt',
    'PI_SQLALCHEMY_ENGINE_OPTIONS': {"pool_pre_ping": os.getenv("PI_SQLALCHEMY_ENGINE_OPTIONS", "False")},
    'SQLALCHEMY_DATABASE_URI': os.getenv("DB_API",'postgresql') + "://" + os.getenv("DB_USER",'') + ":" + os.getenv("DB_PASSWORD",'') + "@" + os.getenv("DB_HOST",'') + ":" + os.getenv("DB_PORT",'') + "/" + os.getenv("DB_NAME",'') + os.getenv("DB_EXTRA_PARAMS",''),
    
    # HTTP/HTTPS設定
    'PREFERRED_URL_SCHEME': os.getenv("PI_PREFERRED_URL_SCHEME", "http"),
    'SESSION_COOKIE_SECURE': os.getenv("PI_SESSION_COOKIE_SECURE", "False").lower() == "true",
    'SESSION_COOKIE_HTTPONLY': os.getenv("PI_SESSION_COOKIE_HTTPONLY", "True").lower() == "true",
}

pi_os_vars = {key: value for key, value in os.environ.items() if key.startswith('PI_')}

for k, v in pi_os_vars.items():
    locals()[k] = v

for k, v in pi_os_special_vars.items():
    locals()[k] = v

# デバッグ用（必要に応じてコメントアウト）
#debugenv = locals().copy()
#pprint.pprint(debugenv)
