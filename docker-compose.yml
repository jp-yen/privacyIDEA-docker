services:
  postgres:
    # https://hub.docker.com/_/postgres
    image: postgres:17.5-alpine
    container_name: PostgreSQL
    environment:
      POSTGRES_DB: privacyidea
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d privacyidea" ]
      interval: 2s
      timeout: 1s
      retries: 10
      start_period: 5s

  privacyidea:
    # https://github.com/privacyidea/privacyidea/releases/
    # https://github.com/gpappsoft/privacyidea-docker
    image: gpappsoft/privacyidea-docker:3.11.4
    container_name: PrivacyIDEA
    profiles:
      - production
    env_file:
      - .env
    volumes:
      # 証明書と暗号化キーをマウント
      - ./privacyidea/certs:/data/certs
      # カスタムpi.cfg設定ファイルをマウント（enckey読み込み対応）
      - ./privacyidea/conf/pi.cfg:/privacyidea/etc/pi.cfg:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f python || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  # PrivacyIDEA（デバッグモード）
  privacyidea-debug:
    # https://github.com/privacyidea/privacyidea/releases/
    # https://github.com/gpappsoft/privacyidea-docker
    image: gpappsoft/privacyidea-docker:3.11.4
    container_name: PrivacyIDEA-Debug
    profiles:
      - debug
    env_file:
      - .env
    environment:
      # デバッグモード制御
      - FLASK_DEBUG=true
      - PI_LOGLEVEL=10
    volumes:
      # 証明書と暗号化キーをマウント
      - ./privacyidea/certs:/data/certs
      # カスタムpi.cfg設定ファイルをマウント（enckey読み込み対応）
      - ./privacyidea/conf/pi.cfg:/privacyidea/etc/pi.cfg:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      default:
        aliases:
          - privacyidea # 本番モードと同じホスト名でもアクセス可能
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f python || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  nginx:
    # https://hub.docker.com/_/nginx
    image: nginx:1.29.0-alpine-perl
    container_name: nginx
    profiles:
      - production
    depends_on:
      privacyidea:
        condition: service_healthy
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    healthcheck:
      test: [ "CMD-SHELL", "nginx -t" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  # nginx（デバッグモード用）
  nginx-debug:
    # https://hub.docker.com/_/nginx
    image: nginx:1.29.0-alpine-perl
    container_name: nginx-debug
    profiles:
      - debug
    depends_on:
      privacyidea-debug:
        condition: service_healthy
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    healthcheck:
      test: [ "CMD-SHELL", "nginx -t" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  # FreeRADIUS（通常モード）
  freeradius:
    # https://github.com/gpappsoft/privacyidea-freeradius
    image: gpappsoft/privacyidea-freeradius:3.4.3-2
    container_name: FreeRADIUS
    profiles:
      - production
    command: freeradius -f
    depends_on:
      privacyidea:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      # 設定ファイル（通常モードと同じファイルを共有）
      - ./freeradius/conf/clients.conf:/opt/etc/raddb/clients.conf:ro
      # 修正されたentrypoint.shをマウント
      - ./freeradius/entrypoint.sh:/entrypoint.sh:ro
      # rlm_perl.ini をマウントすると起動スクリプトで書き換えられるためマウントしない
      # FreeRADIUS専用の証明書を使用
      - ./freeradius/certs:/opt/etc/raddb/certs:ro
    ports:
      - "0.0.0.0:1812:1812/udp"
      - "0.0.0.0:1813:1813/udp"
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f freeradius || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  # FreeRADIUS（デバッグモード）
  freeradius-debug:
    # https://github.com/gpappsoft/privacyidea-freeradius
    image: gpappsoft/privacyidea-freeradius:3.4.3-2
    container_name: FreeRADIUS-Debug
    profiles:
      - debug
    command: freeradius -X
    depends_on:
      privacyidea-debug:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      # 設定ファイル（通常モードと同じファイルを共有）
      - ./freeradius/conf/clients.conf:/opt/etc/raddb/clients.conf:ro
      # 修正されたentrypoint.shをマウント
      - ./freeradius/entrypoint.sh:/entrypoint.sh:ro
      # FreeRADIUS専用の証明書を使用
      - ./freeradius/certs:/opt/etc/raddb/certs:ro
    ports:
      - "0.0.0.0:1812:1812/udp"
      - "0.0.0.0:1813:1813/udp"
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f freeradius || exit 1" ]
      interval: 2s
      timeout: 3s
      retries: 10
      start_period: 3s

  # デバッグツール（debugプロファイル時のみ起動）
  debug_tools:
    build:
      context: ./debug_tools
    container_name: debug_tools
    profiles:
      - debug # プロファイル指定で条件付き起動
    depends_on:
      - postgres
      - privacyidea-debug # デバッグモード時はprivacyidea-debugに依存
      - freeradius-debug # デバッグモード時はfreeradius-debugに依存
    networks:
      - default
    volumes:
      # デバッグ用の作業領域をマウント
      - ./debug_tools/scripts:/debug/scripts:ro
      - ./debug_tools/logs:/debug/logs
      # 設定ファイルへの読み取り専用アクセス
      - ./freeradius/conf:/freeradius/conf:ro
    environment:
      - TERM=xterm-256color
    # bashを起動し、コンテナが終了しないようにする
    entrypoint: /bin/bash
    command: -c "while true; do sleep 3600; done"
    # TTYを有効にしてインタラクティブなシェルを使用可能にする
    tty: true
    stdin_open: true

networks:
  default:
    name: pi-network
